// src/dashboard/dashboard.service.ts
import { BadRequestException, Injectable } from '@nestjs/common';
import { PrismaService } from '../prisma.service';
import type { Prisma } from '@prisma/client';

type BossDto = {
  id: string;
  name: string;
  location: string;
  respawn: number;            // Î∂Ñ Îã®ÏúÑ
  isRandom: boolean;
  lastCutAt: string | null;   // ISO
  nextSpawnAt: string | null; // ISO (Î°§ÎßÅ ÌõÑ ‚ÄúÎã§Ïùå‚Äù Ìïú Î≤à)
  overdue: boolean;           // nextSpawnAt < now
};

@Injectable()
export class DashboardService {
  constructor(private prisma: PrismaService) {}

  private toBigIntOrNull(v: any) {
    if (v == null) return null;
    try { return BigInt(String(v)); } catch { return null; }
  }

  private toBigInt(v: any, msg = 'ÏûòÎ™ªÎêú ID') {
    try { return BigInt(String(v)); } catch { throw new BadRequestException(msg); }
  }

  private toNumber(v: any): number {
    const n = Number(v);
    return Number.isFinite(n) ? n : 0;
  }

  /**
   * Î°úÍ∑∏Ïù∏ Ïó¨Î∂ÄÏôÄ Í¥ÄÍ≥ÑÏóÜÏù¥:
   * - Î™®Îì† Î≥¥Ïä§ Î©îÌÉÄÎ•º Í∞ÄÏ†∏Ïò®Îã§.
   * - clanIdÍ∞Ä ÏûàÏúºÎ©¥ Ìï¥Îãπ ÌòàÎßπÏùò ÏµúÏã† Ïª∑ÏùÑ Î∂ôÏó¨ÏÑú nextSpawn(Í∞ÄÏû• ÏµúÍ∑º Ïª∑ + respawnÎ∂Ñ) Í≥ÑÏÇ∞
   * - ÏµúÏã† Ïª∑ ÏûàÎäî Î≥¥Ïä§ Î®ºÏ†Ä(nextSpawn Í∞ÄÍπåÏö¥ Ïàú), Í∑∏ Îã§Ïùå Ïª∑ ÏóÜÎäî Î≥¥Ïä§(respawn ÏßßÏùÄ Ïàú)
   */
  // Íº≠: respawnÏùÄ "Î∂Ñ" Îã®ÏúÑÎùºÍ≥† Í∞ÄÏ†ï
  async listBossesForClan(clanIdRaw?: any): Promise<{
    ok: true;
    serverTime: string;
    tracked: BossDto[];
    forgotten: BossDto[];
  }> {
    const metas = await this.prisma.bossMeta.findMany({
      select: { id: true, name: true, location: true, respawn: true, isRandom: true },
      orderBy: [{ orderNo: 'asc' }, { name: 'asc' }],
    });

    const clanId = this.toBigIntOrNull(clanIdRaw);
    const nowMs = Date.now();

    // ÏµúÍ∑º Ïª∑(Î≥¥Ïä§Î™Ö Í∏∞Ï§Ä)
    const latestByBoss: Record<string, Date> = {};
    if (clanId) {
      const grouped = await this.prisma.bossTimeline.groupBy({
        by: ['bossName'],
        where: { clanId },
        _max: { cutAt: true },
      });
      for (const g of grouped) {
        if (g._max?.cutAt) latestByBoss[g.bossName] = g._max.cutAt;
      }
    }

    const tracked: Array<BossDto & { _sortMs: number }> = [];
    const forgotten: Array<BossDto & { _sortMs: number }> = [];

    for (const m of metas) {
      const respawnMinutes = this.toNumber((m as any).respawn); // Î∂Ñ
      const last = latestByBoss[m.name] ?? null;

      if (!last) {
        // Ïª∑ Í∏∞Î°ù ÏóÜÏùå ‚Üí Ï§ëÏïô ÏÑπÏÖò
        forgotten.push({
          id: String(m.id),
          name: m.name,
          location: m.location,
          respawn: respawnMinutes,
          isRandom: !!m.isRandom,
          lastCutAt: null,
          nextSpawnAt: null,
          overdue: false,
          _sortMs: Number.MAX_SAFE_INTEGER, // Ï†ïÎ†¨ Îß® Îí§
        });
        continue;
      }

      const lastMs = last.getTime();
      const { nextMs, missed } = this.rollNextAndMissed(lastMs, respawnMinutes, nowMs);

      const row: BossDto & { _sortMs: number } = {
        id: String(m.id),
        name: m.name,
        location: m.location,
        respawn: respawnMinutes,
        isRandom: !!m.isRandom,
        lastCutAt: last.toISOString(),
        nextSpawnAt: new Date(nextMs).toISOString(),
        overdue: nextMs < nowMs, // Ïù¥Î°†ÏÉÅ false(rollNext Ïù¥ÌõÑÎäî Ìï≠ÏÉÅ ÎØ∏Îûò), ÏïàÏ†ÑÏÉÅ Ïú†ÏßÄ
        _sortMs: nextMs,
      };

      if (missed >= 5) {
        // 5Ìöå Ïù¥ÏÉÅ ÎÜìÏπ® ‚Üí Ï§ëÏïô ÏÑπÏÖò
        forgotten.push(row);
      } else {
        // Ï∂îÏ†Å Ï§ë ‚Üí Ï¢åÏ∏° ÏÑπÏÖò
        tracked.push(row);
      }
    }

    // Ï†ïÎ†¨: Í∞ÄÍπåÏö¥ nextSpawn Ïàú
    tracked.sort((a, b) => a._sortMs - b._sortMs);
    forgotten.sort((a, b) => a._sortMs - b._sortMs);

    const trackedOut: BossDto[] = tracked.map(({ _sortMs, ...rest }) => rest);
    const forgottenOut: BossDto[] = forgotten.map(({ _sortMs, ...rest }) => rest);

    return {
      ok: true,
      serverTime: this.formatDate(new Date()),
      tracked: trackedOut,
      forgotten: forgottenOut,
    };
  }

  private rollNextAndMissed(lastMs: number, respawnMin: number, nowMs: number) {
    const step = respawnMin * 60 * 1000;
    if (step <= 0) return { nextMs: lastMs, missed: 0 };
    let next = lastMs + step;
    if (nowMs <= next) return { nextMs: next, missed: 0 };
    const diff = nowMs - next;
    const k = Math.floor(diff / step) + 1; // ÏßÄÎÇòÍ∞Ñ ÏÇ¨Ïù¥ÌÅ¥ Ïàò
    next = next + k * step;
    return { nextMs: next, missed: k };
  }

  private formatDate(d: Date): string {
    // "YYYY-MM-DD HH:mm:ss"
    const z = (n: number) => String(n).padStart(2, '0');
    return `${d.getFullYear()}-${z(d.getMonth() + 1)}-${z(d.getDate())} ${z(d.getHours())}:${z(d.getMinutes())}:${z(d.getSeconds())}`;
  }

  private toMinutes(v: any): number {
    const n = Number(v);
    return Number.isFinite(n) ? n : 0;
  }

  /**
   * Î≥¥Ïä§ Ïª∑ + (ÏÑ†ÌÉù) ÏÑ∏Î∂ÄÏ†ïÎ≥¥ Ï†ÄÏû•
   * - ÌïÑÏàò: BossTimeline
   * - Ï∞∏Ïó¨Ïûê: LootDistributionÏóê ‚ÄúlootItemId: null‚Äù Î°ú Ï∞∏Ïó¨Í∏∞Î°ù Ï¥àÍ∏∞Ìôî
   * - ÏïÑÏù¥ÌÖú: LootItem ÏÉùÏÑ±
   * - Î∂ÑÎ∞∞ Î™®ÎìúÎ©¥: ÏïÑÏù¥ÌÖú √ó Ï∞∏Ïó¨Ïûê Ï°∞Ìï©ÏúºÎ°ú LootDistribution Î†àÏΩîÎìúÎèÑ ÎØ∏Î¶¨ ÏÉùÏÑ±(Í∏àÏï°/ÏßÄÍ∏âÏùÄ Ï∂îÌõÑ ÏóÖÎç∞Ïù¥Ìä∏)
   * - Ïù¥ÎØ∏ÏßÄ ÌååÏùºÎ™ÖÏùÄ imageIds(JSON Î∞∞Ïó¥)Î°ú Ï†ÄÏû•
   */
  async cutBoss(
    clanIdRaw: string | undefined,
    bossMetaId: string,
    body: {
      cutAtIso: string;
      looterLoginId?: string | null;
      items?: string[];
      mode: 'DISTRIBUTE' | 'TREASURY';
      participants?: string[];
      imageFileName?: string;
      actorLoginId?: string;
    },
    actorLoginIdFromArg?: string,
  ) {
    if (!clanIdRaw) throw new BadRequestException('ÌòàÎßπ Ï†ïÎ≥¥Í∞Ä ÌïÑÏöîÌï©ÎãàÎã§.');
    const clanId = this.toBigInt(clanIdRaw);

    const meta = await this.prisma.bossMeta.findUnique({
      where: { id: this.toBigInt(bossMetaId) },
      select: { name: true },
    });
    if (!meta) throw new BadRequestException('Î≥¥Ïä§ Î©îÌÉÄÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');

    // Ïª∑ ÏãúÍ∞Ñ
    const cutAt = new Date(body.cutAtIso);
    if (isNaN(cutAt.getTime())) throw new BadRequestException('cutAtIso ÌòïÏãùÏù¥ Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§.');

    // ÏûÖÎ†• Ï†ïÎ¶¨
    const rawParticipants = (body.participants ?? []).map(s => s.trim()).filter(Boolean);
    const items = (body.items ?? []).map(s => s.trim()).filter(Boolean);
    const rawLooter = (body.looterLoginId ?? '').trim() || null;

    // üîé ÌòàÎßπÏõê Î™©Î°ù Ï°∞Ìöå(Î£®ÌåÖÏûê Í≤ÄÏ¶ùÏö©)
    const clanMembers = await this.prisma.user.findMany({
      where: { clanId },
      select: { loginId: true },
    });
    const memberSet = new Set(clanMembers.map(u => u.loginId));

    // ‚úÖ Î£®ÌåÖÏûê Í≤ÄÏ¶ù: ÌòàÎßπÏóê ÏóÜÏúºÎ©¥ null Ï≤òÎ¶¨(=> ÎÇòÏ§ëÏóê ÌîÑÎ°†Ìä∏ÏóêÏÑú "ÎØ∏Í∞ÄÏûÖ ÌöåÏõê" ÌëúÍ∏∞)
    const looter: string | null = rawLooter && memberSet.has(rawLooter) ? rawLooter : null;

    // ‚õ≥ Í≤ÄÏ¶ù: ÏïÑÏù¥ÌÖúÏù¥ ÏûàÍ≥† Î∂ÑÎ∞∞ Î™®ÎìúÎ©¥ Ï∞∏Ïó¨Ïûê ÏµúÏÜå 1Î™Ö ÌïÑÏöî
    // (Î£®ÌåÖÏûêÎßå ÏûàÍ≥† Ï∞∏Ïó¨Ïûê 0Î™ÖÏù∏ Í≤ΩÏö∞ÎèÑ ÌóàÏö©ÌïòÎ†§Î©¥ ÏïÑÎûò Í≤ÄÏ¶ùÏùÑ Ï†úÍ±∞/ÏôÑÌôîÌïòÏÑ∏Ïöî)
    if (items.length > 0 && body.mode === 'DISTRIBUTE' && rawParticipants.length === 0) {
      throw new BadRequestException('Î∂ÑÎ∞∞ Î™®ÎìúÏóêÏÑúÎäî Ï∞∏Ïó¨ÏûêÎ•º 1Î™Ö Ïù¥ÏÉÅ ÏûÖÎ†•Ìï¥Ïïº Ìï©ÎãàÎã§.');
    }

    const actor = body.actorLoginId ?? actorLoginIdFromArg ?? 'system';

    const created = await this.prisma.$transaction(async (tx: Prisma.TransactionClient) => {
      // 1) ÌÉÄÏûÑÎùºÏù∏
      const timeline = await tx.bossTimeline.create({
        data: {
          clanId,
          bossName: meta.name,
          imageIds: body.imageFileName ? [body.imageFileName] : [],
          cutAt,
          createdBy: actor,
        },
        select: { id: true },
      });

      // 2) ÏïÑÏù¥ÌÖú ÏÉùÏÑ±
      let createdItems: { id: bigint; itemName: string }[] = [];
      if (items.length > 0) {
        createdItems = [];
        for (const itemName of items) {
          const it = await tx.lootItem.create({
            data: {
              timelineId: timeline.id,
              itemName,
              isSold: false,
              soldAt: null,
              soldPrice: null,
              toTreasury: body.mode === 'TREASURY',
              createdBy: actor,
            },
            select: { id: true, itemName: true },
          });
          createdItems.push(it);
        }
      }

      // 3) Î∂ÑÎ∞∞ Î™®ÎìúÎ©¥: ÏïÑÏù¥ÌÖú √ó (Ï∞∏Ïó¨Ïûê ‚à™ Î£®ÌåÖÏûê) ÏÉùÏÑ± (Ï§ëÎ≥µ Ï†úÍ±∞)
      if (body.mode === 'DISTRIBUTE' && createdItems.length > 0) {
        const everyoneSet = new Set<string>(rawParticipants);
        if (looter) everyoneSet.add(looter); // Î£®ÌåÖÏûê Ìè¨Ìï® + ÏûêÎèô Ï§ëÎ≥µ Ï†úÍ±∞
        const everyone = Array.from(everyoneSet);

        if (everyone.length > 0) {
          const rows = createdItems.flatMap((it) =>
            everyone.map((loginId) => ({
              timelineId: timeline.id,
              lootItemId: it.id,
              recipientLoginId: loginId,
              amount: null,
              isPaid: false,
              paidAt: null,
              createdBy: actor,
            })),
          );
          await tx.lootDistribution.createMany({ data: rows });
        }
      }

      return timeline;
    });

    return { ok: true, id: String(created.id) };
  }
}